/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        return find(root);
    }
    static List<List<Integer>> find(Node root){
        List<List<Integer>> ans=new ArrayList<>();
        if(root==null){
            return ans;
        }
        Queue<Node> queue =new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int s=queue.size();
            List<Integer> local=new ArrayList<>();
            for(int i=0;i<s;i++){
                Node node=queue.poll();
                local.add(node.val);
                if (node.children != null) {
                    for (Node child : node.children) {
                        queue.offer(child);  
                    }
                }
            }
            ans.add(local);
        }
        return ans;
    }
    
}
