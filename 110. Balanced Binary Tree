/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isBalanced(TreeNode root) {
        ArrayList<TreeNode> arr=new ArrayList<>();
        find(root,arr);
        for(int i=0;i<arr.size();i++){
             TreeNode node = arr.get(i);
            int leftHeight = height(node.left);
            int rightHeight = height(node.right);

            if (Math.abs(leftHeight - rightHeight) > 1) {
                return false;
            }
        }
        return true;
    }
    static int height(TreeNode node){
        if(node==null){
            return 0;
        }
        int leftn=height(node.left);
        int rightn=height(node.right);
        return Math.max(leftn,rightn)+1;
    }
    static void find(TreeNode node,ArrayList<TreeNode> arr){
        if(node==null){
            return;
        }
        find(node.left,arr);
        arr.add(node);
        find(node.right,arr);
    }
}
