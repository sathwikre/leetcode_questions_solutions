class Solution {
    public int search(int[] nums, int target) {
        return find(nums, target);
    }

    static int find(int[] arr, int t) {
        int pivot = findpivot(arr);

        if (pivot == -1) {
            return search(arr, 0, arr.length - 1, t);
        }

        if (arr[pivot] == t) {
            return pivot;
        }

        if (t >= arr[0]) {
            return search(arr, 0, pivot - 1, t); 
        }

        return search(arr, pivot + 1, arr.length - 1, t);  
    }

    static int findpivot(int[] arr) {
        int s = 0;
        int e = arr.length - 1;
        while (s <= e) {
            int m = s + (e - s) / 2;
            if (m < e && arr[m] > arr[m + 1]) {
                return m;
            }
            if (m > s && arr[m] < arr[m - 1]) {
                return m - 1;
            }
            if (arr[m] >= arr[s]) {
                s = m + 1;
            } else {
                e = m - 1;
            }
        }
        return -1;
    }

    static int search(int[] arr, int s, int e, int t) {
        while (s <= e) {
            int m = s + (e - s) / 2;
            if (arr[m] == t) {
                return m;
            } else if (arr[m] < t) {
                s = m + 1;
            } else {
                e = m - 1;
            }
        }
        return -1;
    }
}
