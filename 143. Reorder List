class Solution {
    public void reorderList(ListNode head) {
        if (head == null) return;
        ListNode newHead = find(head);
        ListNode curr1 = head, curr2 = newHead;
        while (curr1 != null && curr2 != null) {
            curr1.val = curr2.val;
            curr1 = curr1.next;
            curr2 = curr2.next;
        }
    }

    static ListNode find(ListNode head) {
        ArrayList<Integer> arr = new ArrayList<>();

        while (head != null) {
            arr.add(head.val);
            head = head.next;
        }

        int[] nums = new int[arr.size()];
        int s = 0, e = arr.size() - 1, i = 0;
        while (s <= e) {
            if (s == e) { 
                nums[i++] = arr.get(s);
            } else {
                nums[i++] = arr.get(s);
                nums[i++] = arr.get(e);
            }
            s++;
            e--;
        }

        ListNode ans = new ListNode(nums[0]);
        ListNode curr = ans;
        for (int j = 1; j < nums.length; j++) {
            curr.next = new ListNode(nums[j]);
            curr = curr.next;
        }
        return ans;
    }
}
