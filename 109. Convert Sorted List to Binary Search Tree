/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode sortedListToBST(ListNode head) {
       return find(head) ;
    }
    static TreeNode find(ListNode head){
        ArrayList<Integer> arr=new ArrayList<>();
        while(head!=null){
            arr.add(head.val);
            head=head.next;
        }
        int[] ns=new int[arr.size()];
        for(int i=0;i<ns.length;i++){
            ns[i]=arr.get(i);
        }
        return hello(ns,0,ns.length-1);
    }
    static TreeNode hello(int[] arr,int s,int e){
            if(s>e){
                return null;
            }
            int m=s+(e-s)/2;
            TreeNode root=new TreeNode(arr[m]);
            root.left=hello(arr,s,m-1);
            root.right=hello(arr,m+1,e);
            return root;
    }
}
